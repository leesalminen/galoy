type Query {
  globals: Globals
  me: User
  usernameAvailable(username: Username!): Boolean
  userDefaultWalletId(username: Username!): WalletId!
  businessMapMarkers: [MapMarker]
  mobileVersions: [MobileVersions]
  quizQuestions: [QuizQuestion]
  btcPriceList(range: PriceGraphRange!): [PricePoint]
  onChainTxFee(
    walletId: WalletId!
    address: OnChainAddress!
    amount: SatAmount!
    targetConfirmations: TargetConfirmations = 1
  ): OnChainTxFee!
  accountApiKeys: [AccountApiKeyHashed]
}

"""
Provides global settings for the application which might have an impact for the user.
"""
type Globals {
  """
  A list of public keys for the running lightning nodes.
  This can be used to know if an invoice belongs to one of our nodes.
  """
  nodesIds: [String!]!
}

type User {
  id: ID!

  """
  Phone number with international calling code.
  """
  phone: Phone!

  """
  Optional immutable user friendly identifier.
  """
  username: Username

  """
  Preferred language for user.
  When value is 'default' the intent is to use preferred language from OS settings.
  """
  language: Language!

  """
  List the quiz questions the user may have completed.
  """
  quizQuestions: [UserQuizQuestion!]!

  """
  Get full list of contacts.
  Can include the transactions associated with each contact.
  """
  contacts: [UserContact!]!

  """
  Get single contact details.
  Can include the transactions associated with the contact.
  """
  contactByUsername(username: Username!): UserContact!
  twoFAEnabled: Boolean
  createdAt: Timestamp!
  defaultAccount: Account!
}

"""
Phone number which includes country code
"""
scalar Phone

"""
Unique identifier of a user
"""
scalar Username

scalar Language

type UserQuizQuestion {
  question: QuizQuestion!
  completed: Boolean!
}

type QuizQuestion {
  id: ID!

  """
  The earn reward in Satoshis for the quiz question
  """
  earnAmount: SatAmount!
}

"""
(Positive) Satoshi amount (i.g. quiz earning)
"""
scalar SatAmount

type UserContact {
  id: Username!

  """
  Actual identifier of the contact.
  """
  username: Username!

  """
  Alias the user can set for this contact.
  Only the user can see the alias attached to their contact.
  """
  alias: ContactAlias
  transactionsCount: Int!

  """
  Paginated list of transactions sent to/from this contact.
  """
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
}

"""
An alias name that a user can set for a wallet (with which they have transactions)
"""
scalar ContactAlias

"""
A connection to a list of items.
"""
type TransactionConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [TransactionEdge]
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  The item at the end of the edge
  """
  node: Transaction

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
Give details about an individual transaction.
Galoy have a smart routing system which is automatically
settling intraledger when both the payer and payee use the same wallet
therefore it's possible the transactions is being initiated onchain
or with lightning but settled intraledger.
"""
type Transaction {
  id: ID!

  """
  From which protocol the payment has been initiated.
  """
  initiationVia: InitiationVia!

  """
  To which protocol the payment has settled on.
  """
  settlementVia: SettlementVia!

  """
  Amount of sats paid by the user.
  """
  settlementAmount: SatAmount!
  settlementFee: SatAmount!

  """
  Price in USDCENT/SATS at time of settlement.
  """
  settlementPrice: Price!
  direction: TxDirection!
  status: TxStatus!
  memo: Memo
  createdAt: Timestamp!
}

union InitiationVia = InitiationViaIntraLedger | InitiationViaLn | InitiationViaOnChain

type InitiationViaIntraLedger {
  counterPartyWalletId: WalletId
  counterPartyUsername: Username
}

"""
Unique identifier of a user
"""
scalar WalletId

type InitiationViaLn {
  paymentHash: PaymentHash!
}

scalar PaymentHash

type InitiationViaOnChain {
  address: OnChainAddress!
}

"""
An address for an on-chain bitcoin destination
"""
scalar OnChainAddress

union SettlementVia = SettlementViaIntraLedger | SettlementViaLn | SettlementViaOnChain

type SettlementViaIntraLedger {
  counterPartyWalletId: WalletId

  """
  Settlement destination: Could be null if the payee does not have a username
  """
  counterPartyUsername: Username
}

type SettlementViaLn {
  paymentSecret: LnPaymentSecret
}

scalar LnPaymentSecret

type SettlementViaOnChain {
  transactionHash: OnChainTxHash!
}

scalar OnChainTxHash

"""
Price amount expressed in base/offset. To calculate, use: `base / 10^offset`
"""
type Price {
  base: SafeInt!
  offset: Int!
  currencyUnit: ExchangeCurrencyUnit!
  formattedAmount: String!
}

"""
Non-fractional signed whole numeric value between -(2^53) + 1 and 2^53 - 1
"""
scalar SafeInt

enum ExchangeCurrencyUnit {
  BTCSAT
  USDCENT
}

enum TxDirection {
  SEND
  RECEIVE
}

enum TxStatus {
  PENDING
  SUCCESS
  FAILURE
}

"""
Text field in a lightning payment transaction
"""
scalar Memo

"""
Timestamp field, serialized as Unix time (the number of seconds since the Unix epoch)
"""
scalar Timestamp

interface Account {
  id: ID!
  wallets: [Wallet!]!
  defaultWalletId: WalletId!
  csvTransactions(walletIds: [WalletId!]!): String!
}

interface Wallet {
  id: ID!
  walletCurrency: WalletCurrency!
  balance: SignedAmount!
  transactions(
    """
    Returns the items in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the first n items from the list.
    """
    first: Int

    """
    Returns the items in the list that come before the specified cursor.
    """
    before: String

    """
    Returns the last n items from the list.
    """
    last: Int
  ): TransactionConnection
}

enum WalletCurrency {
  BTC
}

"""
An amount (of a currency) that can be negative (i.g. in a transaction)
"""
scalar SignedAmount

type MapMarker {
  username: Username
  mapInfo: MapInfo!
}

type MapInfo {
  title: String!
  coordinates: Coordinates!
}

type Coordinates {
  longitude: Float!
  latitude: Float!
}

type MobileVersions {
  platform: String!
  currentSupported: Int!
  minSupported: Int!
}

type PricePoint {
  """
  Unix timesamp (number of seconds elapsed since January 1, 1970 00:00:00 UTC)
  """
  timestamp: Timestamp!
  price: Price!
}

"""
The range for the X axis in the BTC price graph
"""
enum PriceGraphRange {
  ONE_DAY
  ONE_WEEK
  ONE_MONTH
  ONE_YEAR
  FIVE_YEARS
}

type OnChainTxFee {
  amount: SatAmount!
  targetConfirmations: TargetConfirmations!
}

"""
(Positive) Number of blocks in which the transaction is expected to be confirmed
"""
scalar TargetConfirmations

type AccountApiKeyHashed {
  label: AccountApiKeyLabel!
  expireAt: Timestamp!
}

"""
Identifier of an account api key
"""
scalar AccountApiKeyLabel

type Mutation {
  userRequestAuthCode(input: UserRequestAuthCodeInput!): SuccessPayload!
  userLogin(input: UserLoginInput!): AuthTokenPayload!
  twoFAGenerate: TwoFAGeneratePayload!
  twoFASave(input: TwoFASaveInput!): SuccessPayload!
  twoFADelete(input: TwoFADeleteInput!): SuccessPayload!
  userQuizQuestionUpdateCompleted(
    input: UserQuizQuestionUpdateCompletedInput!
  ): UserQuizQuestionUpdateCompletedPayload!
  deviceNotificationTokenCreate(
    input: DeviceNotificationTokenCreateInput!
  ): SuccessPayload!
  accountApiKeyCreate(input: AccountApiKeyCreateInput!): AccountApiKeyPayload!
  accountApiKeyDisable(input: AccountApiKeyDisableInput!): SuccessPayload!
  userUpdateLanguage(input: UserUpdateLanguageInput!): UserUpdateLanguagePayload!
  userUpdateUsername(input: UserUpdateUsernameInput!): UserUpdateUsernamePayload!
  userContactUpdateAlias(
    input: UserContactUpdateAliasInput!
  ): UserContactUpdateAliasPayload!
  lnInvoiceFeeProbe(input: LnInvoiceFeeProbeInput!): SatAmountPayload!
  lnNoAmountInvoiceFeeProbe(input: LnNoAmountInvoiceFeeProbeInput!): SatAmountPayload!
  lnInvoiceCreate(input: LnInvoiceCreateInput!): LnInvoicePayload!
  lnNoAmountInvoiceCreate(input: LnNoAmountInvoiceCreateInput!): LnNoAmountInvoicePayload!
  lnInvoiceCreateOnBehalfOfRecipient(
    input: LnInvoiceCreateOnBehalfOfRecipientInput!
  ): LnInvoicePayload!
  lnNoAmountInvoiceCreateOnBehalfOfRecipient(
    input: LnNoAmountInvoiceCreateOnBehalfOfRecipientInput!
  ): LnNoAmountInvoicePayload!
  lnInvoicePaymentSend(input: LnInvoicePaymentInput!): PaymentSendPayload!
  lnNoAmountInvoicePaymentSend(input: LnNoAmountInvoicePaymentInput!): PaymentSendPayload!
  intraLedgerPaymentSend(input: IntraLedgerPaymentSendInput!): PaymentSendPayload!
  onChainAddressCreate(input: OnChainAddressCreateInput!): OnChainAddressPayload!
  onChainAddressCurrent(input: OnChainAddressCurrentInput!): OnChainAddressPayload!
  onChainPaymentSend(input: OnChainPaymentSendInput!): PaymentSendPayload!
  onChainPaymentSendAll(input: OnChainPaymentSendAllInput!): PaymentSendPayload!
  captchaCreateChallenge: CaptchaCreateChallengePayload!
  captchaRequestAuthCode(input: CaptchaRequestAuthCodeInput!): SuccessPayload!
}

type SuccessPayload {
  errors: [Error!]!
  success: Boolean
}

interface Error {
  message: String!
  path: [String]
}

input UserRequestAuthCodeInput {
  phone: Phone!
}

type AuthTokenPayload {
  errors: [Error!]!
  authToken: AuthToken
}

"""
An authentication code valid for a single use
"""
scalar AuthToken

input UserLoginInput {
  phone: Phone!
  code: OneTimeAuthCode!
}

"""
An authentication code valid for a single use
"""
scalar OneTimeAuthCode

type TwoFAGeneratePayload {
  errors: [Error!]!
  twoFASecret: TwoFASecret
}

type TwoFASecret {
  secret: String!
  uri: String!
}

input TwoFASaveInput {
  secret: String!
  token: String!
}

input TwoFADeleteInput {
  token: String!
}

type UserQuizQuestionUpdateCompletedPayload {
  errors: [Error!]!
  userQuizQuestion: UserQuizQuestion
}

input UserQuizQuestionUpdateCompletedInput {
  id: ID!
}

input DeviceNotificationTokenCreateInput {
  deviceToken: String!
}

type AccountApiKeyPayload {
  errors: [Error!]!
  accountApiKey: AccountApiKey
}

type AccountApiKey {
  label: AccountApiKeyLabel!
  key: String!
  secret: String!
  expireAt: Timestamp!
}

input AccountApiKeyCreateInput {
  label: AccountApiKeyLabel
  expireAt: Timestamp!
}

input AccountApiKeyDisableInput {
  label: AccountApiKeyLabel!
}

type UserUpdateLanguagePayload {
  errors: [Error!]!
  user: User
}

input UserUpdateLanguageInput {
  language: Language!
}

type UserUpdateUsernamePayload {
  errors: [Error!]!
  user: User
}

input UserUpdateUsernameInput {
  username: Username!
}

type UserContactUpdateAliasPayload {
  errors: [Error!]!
  contact: UserContact
}

input UserContactUpdateAliasInput {
  username: Username!
  alias: ContactAlias!
}

type SatAmountPayload {
  errors: [Error!]!
  amount: SatAmount
}

input LnInvoiceFeeProbeInput {
  walletId: WalletId!
  paymentRequest: LnPaymentRequest!
}

"""
BOLT11 lightning invoice payment request with the amount included
"""
scalar LnPaymentRequest

input LnNoAmountInvoiceFeeProbeInput {
  walletId: WalletId!
  paymentRequest: LnPaymentRequest!
  amount: SatAmount!
}

type LnInvoicePayload {
  errors: [Error!]!
  invoice: LnInvoice
}

type LnInvoice {
  paymentRequest: LnPaymentRequest!
  paymentHash: PaymentHash!
  paymentSecret: LnPaymentSecret!
  satoshis: SatAmount
}

input LnInvoiceCreateInput {
  walletId: WalletId!
  amount: SatAmount!
  memo: Memo
}

type LnNoAmountInvoicePayload {
  errors: [Error!]!
  invoice: LnNoAmountInvoice
}

type LnNoAmountInvoice {
  paymentRequest: LnPaymentRequest!
  paymentHash: PaymentHash!
  paymentSecret: LnPaymentSecret!
}

input LnNoAmountInvoiceCreateInput {
  walletId: WalletId!
  memo: Memo
}

input LnInvoiceCreateOnBehalfOfRecipientInput {
  recipientWalletId: WalletId!
  amount: SatAmount!
  memo: Memo
  descriptionHash: Hex32Bytes
}

"""
Hex-encoded string of 32 bytes
"""
scalar Hex32Bytes

input LnNoAmountInvoiceCreateOnBehalfOfRecipientInput {
  recipientWalletId: WalletId!
  memo: Memo
}

type PaymentSendPayload {
  errors: [Error!]!
  status: PaymentSendResult
}

enum PaymentSendResult {
  SUCCESS
  FAILURE
  PENDING
  ALREADY_PAID
}

input LnInvoicePaymentInput {
  walletId: WalletId!
  paymentRequest: LnPaymentRequest!
  memo: Memo
}

input LnNoAmountInvoicePaymentInput {
  walletId: WalletId!
  paymentRequest: LnPaymentRequest!
  amount: SatAmount!
  memo: Memo
}

input IntraLedgerPaymentSendInput {
  walletId: WalletId!
  recipientWalletId: WalletId!
  amount: SatAmount!
  memo: Memo
}

type OnChainAddressPayload {
  errors: [Error!]!
  address: OnChainAddress
}

input OnChainAddressCreateInput {
  walletId: WalletId!
}

input OnChainAddressCurrentInput {
  walletId: WalletId!
}

input OnChainPaymentSendInput {
  walletId: WalletId!
  address: OnChainAddress!
  amount: SatAmount!
  memo: Memo
  targetConfirmations: TargetConfirmations = 1
}

input OnChainPaymentSendAllInput {
  walletId: WalletId!
  address: OnChainAddress!
  memo: Memo
  targetConfirmations: TargetConfirmations = 1
}

type CaptchaCreateChallengePayload {
  errors: [Error!]!
  result: CaptchaCreateChallengeResult
}

type CaptchaCreateChallengeResult {
  id: String!
  challengeCode: String!
  newCaptcha: Boolean!
  failbackMode: Boolean!
}

input CaptchaRequestAuthCodeInput {
  phone: Phone!
  challengeCode: String!
  validationCode: String!
  secCode: String!
}

type Subscription {
  myUpdates: MyUpdatesPayload!
  price(input: PriceInput!): PricePayload!
  lnInvoicePaymentStatus(
    input: LnInvoicePaymentStatusInput!
  ): LnInvoicePaymentStatusPayload!
}

type MyUpdatesPayload {
  errors: [Error!]!
  update: UserUpdate
  me: User
}

union UserUpdate = Price | LnUpdate | OnChainUpdate | IntraLedgerUpdate

type LnUpdate {
  paymentHash: PaymentHash!
  status: InvoicePaymentStatus!
}

enum InvoicePaymentStatus {
  PENDING
  PAID
}

type OnChainUpdate {
  txNotificationType: TxNotificationType!
  txHash: OnChainTxHash!
  amount: SatAmount!
  usdPerSat: Float!
}

enum TxNotificationType {
  OnchainReceipt
  OnchainReceiptPending
  OnchainPayment
  LnInvoicePaid
  IntraLedgerReceipt
  IntraLedgerPayment
}

type IntraLedgerUpdate {
  txNotificationType: TxNotificationType!
  amount: SatAmount!
  usdPerSat: Float!
}

type PricePayload {
  errors: [Error!]!
  price: Price
}

input PriceInput {
  amount: SatAmount!
  amountCurrencyUnit: ExchangeCurrencyUnit!
  priceCurrencyUnit: ExchangeCurrencyUnit!
}

type LnInvoicePaymentStatusPayload {
  errors: [Error!]!
  status: InvoicePaymentStatus
}

input LnInvoicePaymentStatusInput {
  paymentRequest: LnPaymentRequest!
}
